server:
  port: 8071
spring:
  application:
    name: configserver
  profiles:
    active:
    - git
  cloud:
    config:
      server:
        git:
          uri: "https://github.com/joselopez-88/eazybytes-config.git"
        # Usa la rama main como fuente por defecto   
          default-label: section11
        # timeout esta definido en segundos  
          timeout: 5
        # Hace que el repo se clone al arrancar el Config Server, en lugar de esperar a que llegue una primera petición. Esto ayuda a detectar errores de conexión desde el inicio.
          clone-on-start: true
        # Siempre intenta hacer git pull para obtener los últimos cambios, incluso si ya hay una copia local. Es útil si haces cambios en el repo y quieres que se reflejen sin reiniciar.  
          force-pull: true
management:
  endpoints:
    web:
      exposure:
        include:
# Expone todos los endpoints de gestion de la aplicación en el puerto 8080 usando el prefijo "/actuator"
# Para actualizar los properties usando @ConfigurationProperties es "refresh" /actuator/refresh - se ejecuta en cada microservicio a actualizar
# Para conectar con RabbitMQ requiere "bus-refresh" /actuator/busrefresh - Se ejecuta una sola vez y se actualiza en todos los microservicios
# siempre y cuando todos esten conectados a RabbitMQ
# "*" significa todos
        - health
# Activando la comprobacion de estado de los microservicios
# liveness indica que esta activo o vivo el microservicio
# readiness indica que esta listo para recibir peticiones
# Los endpoints de health se usan para comprobar el estado de los microservicios
# son /actuator/health y /actuator/health/readiness y /actuator/health/liveness
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
encrypt:
  # La clave para cifrar y descifrar las propiedades
  # La clave debe ser de 16, 24 o 32 bytes
  key: "1A26Z2B25YV3D2F4D3F5A2B3C4D5F6A1"